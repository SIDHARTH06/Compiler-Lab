//Interrupt 11 Routine: Getpid, Getppid, Wait, Signal System Calls

alias sysCall R1;
alias userSP R2;

//Storing userSP
userSP=SP;

//Extracting  System Call number from user stack
sysCall=[([PTBR + 2 * ((userSP - 5) / 512)] * 512) + ((userSP - 5) % 512)];



//Save the value of SP in the user SP field of Process Table entry of the process.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13]=SP;

//Set the value of SP to beginning of the kernel stack.
SP=([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512)-1;






//Checking whether it is wait system Call
if(sysCall==13) then

    //Set the MODE FLAG field in the process table to the system call number which is 13 for wait system call
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 13;

    //Extract PID from the user stack
    alias pid R3;
    pid=[([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];

   

    //Checking whether the pid is invalid Then Return -1
    if(pid==[SYSTEM_STATUS_TABLE+1] || [PROCESS_TABLE+(pid*PT_ENTRY_SIZE)+4]==TERMINATED || pid>=MAX_PROC_NUM || pid<0) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * PT_ENTRY_SIZE) + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = -1;

        //Switch to user stack
        SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * PT_ENTRY_SIZE) + 13];

        ireturn;
    endif;


    //Change the state of the current process from RUNNING to the tuple (WAIT_PROCESS, argument PID) in the process table
    [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*PT_ENTRY_SIZE)+4]=WAIT_PROCESS;
    [PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*PT_ENTRY_SIZE)+5]=pid;

    //Invoke the Scheduler
    multipush(R1,R2,R3);
    call MOD_5;
    multipop(R1,R2,R3) ;

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * PT_ENTRY_SIZE) + 9] = 0;

   //Set 0 as Return Value in the user stack. (Address Translation required)
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = 0;    

    


endif;



//Signal System Call
if(sysCall==14) then

    //Set the MODE FLAG field in the process table to the system call number which is 14 for signal system call
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * PT_ENTRY_SIZE) + 9] = 14;

    //System Call not using kernel stack
    

    //Loop through all process table entries, if there is a process with STATE as tuple (WAIT_PROCESS, current process PID) then change the STATE field to READY.
    alias loop R3;
    loop=0;

    while(loop<MAX_PROC_NUM) do
        if([PROCESS_TABLE+(loop*PT_ENTRY_SIZE)+4]==WAIT_PROCESS && [PROCESS_TABLE+(loop*PT_ENTRY_SIZE)+5]==[SYSTEM_STATUS_TABLE+1]) then
            [PROCESS_TABLE+(loop*PT_ENTRY_SIZE)+4]=READY;
        endif;
        loop=loop+1;
    endwhile;


    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * PT_ENTRY_SIZE) + 9] = 0;

    //Set 0 as Return Value in the user stack. (Address Translation required)
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = 0;    




endif;


//Getpid syscall
if(sysCall==11) then

   
    //Set pid as Return Value in the user stack. (Address Translation required)
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = [SYSTEM_STATUS_TABLE+1];


    
endif;


//Getppid syscall
if(sysCall==12) then

    alias pid R3;

    pid=[SYSTEM_STATUS_TABLE+1];

    //Set ppid as Return Value in the user stack. (Address Translation required)
    [([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512)] = [PROCESS_TABLE+(pid*PT_ENTRY_SIZE)+2];


    
endif;


//Switch to user stack
SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * PT_ENTRY_SIZE) + 13];

ireturn;















