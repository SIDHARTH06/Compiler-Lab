//Resource Manager Module

//Function number is present in R1 and PID passed as an argument is stored in R2
alias functionNum R1;
alias currentPID R2;

if(functionNum==8)then  //Acquire Terminal function


while([TERMINAL_STATUS_TABLE]==1)do

[PROCESS_TABLE+currentPID*16+4]=WAIT_TERMINAL;          //Change the state of the current process in its process table entry to WAIT_TERMINAL.
multipush(R1,R2);       //Storing Context               
call MOD_5;             //Calling Scheduler
multipop(R1,R2);        //Restoring Context

endwhile;

[TERMINAL_STATUS_TABLE]=1;       //Change the STATUS field to 1 in terminal status table
[TERMINAL_STATUS_TABLE+1]=currentPID ;   //Change PID to current PID in terminal status table

breakpoint;   //Stage 15 assignment 1

return;

endif;






if(functionNum==9)then      //Release Terminal Function

if(currentPID!=[TERMINAL_STATUS_TABLE+1])then     //If currentPID is not equal to PID in terminal status table then process is trying to release the terminal without acquiring it
R0=-1;               //Storing -1 as Return value and returning
return;
endif;

[TERMINAL_STATUS_TABLE]=0;           //Change STATUS field in terminal table to 0 (indicating release of terminal)

alias pids R3;

pids=0;

while(pids<=15)do          //Update the STATE to READY for all processes (with valid PID) which have STATE as WAIT_TERMINAL.

if ([PROCESS_TABLE+pids*16+4]==WAIT_TERMINAL)then
[PROCESS_TABLE+pids*16+4]=READY;
endif;

pids=pids+1;
endwhile;

R0=0;   //Save 0 in register R0 indicating success.

breakpoint;   //Stage 15 assignment 1

return;

endif;