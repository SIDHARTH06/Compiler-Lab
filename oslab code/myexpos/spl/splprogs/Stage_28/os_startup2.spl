//IDLE 2

//Page Table
PTBR=PAGE_TABLE_BASE+20*14;
PTLR=10;


//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 83;         
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";


//Process Table for IDLE 2
alias idle2proc R2;
idle2proc=PROCESS_TABLE+(IDLE2_PROCESS*PT_ENTRY_SIZE);

// [idle2proc]=0;              //Tick as zero
[idle2proc + 1] = IDLE2_PROCESS;        //setting PID
[idle2proc +3]=0;           //User ID
[idle2proc + 4] = RUNNING;  // setting state
[idle2proc + 11]= 84;       //User Area Page number for the IDLE Process
[idle2proc + 13]= 8*512;     //UPTR Field (Logical Address to the top of the USER Stack) for IDLE
[idle2proc + 12]= 0;        //Setting KPTR Field , it is assumed to be empty
[idle2proc + 14]= PAGE_TABLE_BASE+20*14;     //Setting PTBR  Field of IDLE 2 Process
[idle2proc + 15]= 10;       //Setting PTLR Field of IDLE Process






[83*512] = [69 * 512 + 1];  // Storing the entry point of the code to the top of the stack of the IDLE_2 Process

SP=8*512;

PTBR=PAGE_TABLE_BASE+20*14;
PTLR=10;

ireturn;