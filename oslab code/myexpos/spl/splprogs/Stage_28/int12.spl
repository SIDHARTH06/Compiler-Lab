//Logout System Call (Sys Call number 28)

//Save the value of register SP as userSP
alias userSP R1;
userSP=SP;

alias pid R2;
pid=[SYSTEM_STATUS_TABLE+5*CORE+1];

alias processTableEntry R3;
processTableEntry=PROCESS_TABLE + (pid * PT_ENTRY_SIZE);


//Set the MODE FLAG field in the process table to the system call number which is 28 for Logout system call
[processTableEntry + 9] = 28;


//Save the value of SP in the user SP field of Process Table entry of the process.
[processTableEntry+ 13]=userSP;

//Set the value of SP to beginning of the kernel stack.
SP=([processTableEntry + 11]*512)-1;


// set LOGOUT_STATUS=1 in SYSTEM_STATUS_TABLE
[SYSTEM_STATUS_TABLE+7]=1;
//wait until secondary core schedules IDLE2 before proceeding
multipush(R1,R2,R3);
call SCHEDULER;
multipop(R1,R2,R3);




multipush(R1,R2,R3);
R1=ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1,R2,R3);



alias returnAddr R4;
returnAddr=([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);


//If PID of the current process is not 2 (shell), return -1.
if(pid!=2) then

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry + 9] = 0;

    //Set -2 as Return Value in the user stack. (Address Translation required)
    [returnAddr] = -1;

    
    multipush(R3);
    R1=RELEASE_LOCK;
    R2=KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R3);

    
    //Switch to user stack
    SP=[processTableEntry + 13];


    ireturn;


endif;


//Kill all user processes except the shell by calling the kill_all() function in the Process Manager module.
multipush(R1,R2,R3,R4);
R1=5;       //Kill All
R2=pid;     //pid
call MOD_1;
multipop(R1,R2,R3,R4);

//Logout Status=0 after kill all
[SYSTEM_STATUS_TABLE+7]=0;

//Set the STATE of the current process(shell) in the process table to TERMINATED.
[processTableEntry+4]=TERMINATED;


//Shell should be set ready to run when the next user logs in.
//Obtain the entry point IP value from the header of the shell program. Place it in the beginning (logical addesss 4096) 
//of the stack of the shell(current process). Reset the USERSP field of the shell to 4096.

alias entryIP R5;
entryIP=[([PTBR+8]*512)+1];
[[PTBR+16]*512]=entryIP;
[processTableEntry+13]=4096;

//Wake up the Login process by changing STATE in it's process table entry to READY.
[PROCESS_TABLE+PT_ENTRY_SIZE+4]=READY;


//In system status table, reset the CURRENT_USER_ID field back to 0 (kernel).
[SYSTEM_STATUS_TABLE]=0;

//Invoke the context_switch() function in the Scheduler Module.

R1=RELEASE_LOCK;
R2=KERN_LOCK;
call ACCESS_CONTROL;


call MOD_5;


R1=ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL; 


//no Ireturn


