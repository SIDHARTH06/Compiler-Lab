//Write System Call (System Call number 5)

alias pid R2;
pid=[SYSTEM_STATUS_TABLE+5*CORE+1];

alias processTableEntry R3;
processTableEntry=PROCESS_TABLE + (pid * PT_ENTRY_SIZE);

//Save the value of SP in the user SP field of Process Table entry of the process.
[processTableEntry+ 13]=SP;

//Set the value of SP to beginning of the kernel stack.
SP=([processTableEntry + 11]*512)-1;


multipush(R2,R3);
R1=ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R2,R3);

//Save the value of register SP as userSP
alias userSP R1;
userSP=[processTableEntry+ 13];



//Set the MODE FLAG field in the process table to the system call number which is 5 for read system call
[processTableEntry + 9] = 5;




//Getting the fileDescriptor (Argument 1)
alias fileDescriptor R4;
fileDescriptor=[([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];


//Calculate physical address of the argument 2 and extract the value from it , which is the word to be written.
alias word R5;
word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

alias physicalAddrRetVal R6;
physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);



//If the word is to be written to STDOUT
if(fileDescriptor==-2) then

    //Call the terminal write function in device Manager module
    //Print the word
    multipush(R1,R2,R3,R4,R5,R6);           //Saving Register Context
    R1=3;                                   //Store the function number of Terminal Write
    R2=pid;                                 //PID of the current process
    R3=word;                                //word to be printed
    call MOD_4;                             //Calling Device Manager Module
    multipop(R1,R2,R3,R4,R5,R6);          

    

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry+ 9] = 0;

    //Return 0
    physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = 0;

    goto IReturn;

    // multipush(R1);
    // R1=RELEASE_LOCK;
    // R2=KERN_LOCK;
    // call ACCESS_CONTROL;
    // multipop(R1);
    // // set back the value of SP to point to top of user stack
    // SP = userSP;



    // ireturn;

endif;


//If not terminal,write to file

//If file descriptor is invalid, return -1.
// File descriptor value should be within the range 0 to 7 (both included).
if(fileDescriptor<0 || fileDescriptor>7) then

    [physicalAddrRetVal]=-1;

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry+ 9] = 0;

    

    //passing control back to user program
    goto IReturn;

    // multipush(R1);
    // R1=RELEASE_LOCK;
    // R2=KERN_LOCK;
    // call ACCESS_CONTROL;
    // multipop(R1);

    // // set back the value of SP to point to top of user stack
    // SP = userSP;


    // ireturn;


endif;

//Locate the Per-Process Resource Table of the current process.
alias resourceTable R7;
resourceTable=([processTableEntry+11]*512)+RESOURCE_TABLE_OFFSET;


//If the Resource identifier field of the Per Process Resource Table entry is invalid or does not indicate a FILE, return -1.  
if([resourceTable+(fileDescriptor*2)]!=FILE) then

    [physicalAddrRetVal]=-1;

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry+ 9] = 0;

    goto IReturn;

    // multipush(R1);
    // R1=RELEASE_LOCK;
    // R2=KERN_LOCK;
    // call ACCESS_CONTROL;
    // multipop(R1);

    // // set back the value of SP to point to top of user stack
    // SP = userSP;

    // //passing control back to user program
    // ireturn;



endif;


//Get the index of the Open File Table entry from the Per Process Resource Table entry.
alias fileTableIndex R8;
fileTableIndex=[resourceTable+(fileDescriptor*2)+1];

//Get the index of the Inode Table entry from the Open File Table entry. 
alias inodeIndex R9;
inodeIndex=[OPEN_FILE_TABLE+(fileTableIndex*4)];

alias userID R10;
userID=[processTableEntry+3];

alias inodeEntry R11;
inodeEntry=INODE_TABLE+(inodeIndex*16);

//If the current user is not root and the current user does not own the file and the exclusive permission is set, return -3.
if(userID!=ROOT && userID!=[inodeEntry+3] && [inodeEntry+4]==EXCLUSIVE) then

    [physicalAddrRetVal]=-3;

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry+ 9] = 0;

    goto IReturn;

    // multipush(R1);
    // R1=RELEASE_LOCK;
    // R2=KERN_LOCK;
    // call ACCESS_CONTROL;
    // multipop(R1);

    // // set back the value of SP to point to top of user stack
    // SP = userSP;


    // //passing control back to user program
    // ireturn;

endif;



//Acquire the Lock on the File by calling the acquire_inode() function in the Resource Manager module.
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
R1=4;   //Acquire Inode
R3=pid;     //Giving pid first because pid is stored in R2
R2=inodeIndex;      //Inode index
call MOD_0;     //Resource Manager Module
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

//Recalculate physical address after blocking code
physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);

//If acquire inode fails Return -1
if(R0==-1) then

    [physicalAddrRetVal]=-1;

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry+ 9] = 0;

    goto IReturn;

    // multipush(R1);
    // R1=RELEASE_LOCK;
    // R2=KERN_LOCK;
    // call ACCESS_CONTROL;
    // multipop(R1);


    // // set back the value of SP to point to top of user stack
    // SP = userSP;



    // //passing control back to user program
    // ireturn;


endif;


//Get the Lseek position from the Open File Table entry
alias lseek R12;
lseek=[OPEN_FILE_TABLE+(fileTableIndex*4)+2];



//If lseek position is same as the MAX_FILE_SIZE, release_inode() and return -2. (Maximum File Size)
if(lseek==MAX_FILE_SIZE) then

    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
    R1=5;   //Release Inode
    R3=pid;
    R2=inodeIndex;
    call MOD_0;     //Resource Manager
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);


    [physicalAddrRetVal]=-2;

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry+ 9] = 0;

    goto IReturn;

    // multipush(R1);
    // R1=RELEASE_LOCK;
    // R2=KERN_LOCK;
    // call ACCESS_CONTROL;
    // multipop(R1);

    // // set back the value of SP to point to top of user stack
    // SP = userSP;




    // //passing control back to user program
    // ireturn;



endif;



//If the Lseek position is a multiple of 512 and the same as File size in the inode table	/* New block to be allocated */
if(lseek%512==0 && lseek==[inodeEntry+2]) then

    //Get a free disk block by calling the get_free_block() function in the Memory Manager module.
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
    R1=3;       //Get Free Block
    call MOD_2; //Memory Manager Module
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);

    //If no free disk block is found release_inode() and return -2. 
    if(R0==-1) then

        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);
        R1=5;   //Release Inode
        R3=pid;
        R2=inodeIndex;
        call MOD_0;     //Resource Manager
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12);


        [physicalAddrRetVal]=-2;

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry+ 9] = 0;

        goto IReturn;

        // multipush(R1);
        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;
        // multipop(R1);

        // // set back the value of SP to point to top of user stack
        // SP = userSP;


        // //passing control back to user program
        // ireturn;
    
    endif;

    //Set the new disk block found in the corresponding (lseek / 512) disk block field  in the Inode table entry
    [inodeEntry+8+(lseek/512)]=R0;

endif;


//Find the disk block number and the position in the block from which input is to be written.
alias blockIndex R13;
blockIndex=lseek/512;

alias diskBlockNumber R14;
diskBlockNumber=[inodeEntry+8+blockIndex];

alias offset R15;
offset=lseek%512;


//Write the word to the File Buffer by calling the buffered_write() function in the File Manager module.
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
R1=1;   //Buffered Write
R2=diskBlockNumber;
R3=offset;
R4=word;
call MOD_3;     //File Manager Module
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);


//If Lseek equals file size, increment file size in the inode table entry and also in the memory copy of the root file.
if(lseek==[inodeEntry+2]) then

    [inodeEntry+2]=lseek+1;     //Increment file size in inode table
    [ROOT_FILE+(8*inodeIndex)+1]=lseek+1;       //Increment file size in root file

endif;


//Increment the Lseek position in the Open File Table entry.
[OPEN_FILE_TABLE+(fileTableIndex*4)+2]=lseek+1;


//Release the Lock on the File by calling the release_inode() function in the Resource Manager module.
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
R1=5;   //Release Inode
R3=pid;
R2=inodeIndex;
call MOD_0;     //Resource Manager
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);




//Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
[processTableEntry+ 9] = 0;

//Return 0
//Recalculate physical address after blocking code
physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
[physicalAddrRetVal]=0;





IReturn:

multipush(R1);
R1=RELEASE_LOCK;
R2=KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1);


// set back the value of SP to point to top of user stack
SP = userSP;



//passing control back to user program
ireturn;







