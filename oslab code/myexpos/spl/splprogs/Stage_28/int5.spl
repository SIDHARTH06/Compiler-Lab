// INT 5 -Routine (Seek,Open,Close)


alias processTableEntry R3;
processTableEntry=PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+5*CORE + 1] * PT_ENTRY_SIZE) ;


//Save the value of SP in the user SP field of Process Table entry of the process.
[processTableEntry + 13]=SP;

//Set the value of SP to beginning of the kernel stack.
SP=([processTableEntry + 11]*512)-1;

multipush(R3);
R1=ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R3);

alias sysCall R1;
alias userSP R2;





//Storing userSP
userSP=[processTableEntry + 13];

//Extracting  System Call number from user stack
sysCall=[([PTBR + 2 * ((userSP - 5) / 512)] * 512) + ((userSP - 5) % 512)];




alias returnValueAddr R4;
returnValueAddr=([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);








//Getting the Argument 1
alias arg1 R5;
arg1=[([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];



//Checking whether it is open system Call
if(sysCall==2) then

    //Getting the fileName (Argument 1)
    alias fileName R5;
    

    //Set the MODE FLAG field in the process table to the system call number which is 2 for Open system call
    [processTableEntry + 9] = 2;


    alias index R6;
    alias userAreaPage R7;
    alias resourceTable R8;

    index=0;
    userAreaPage=[processTableEntry+11];
    resourceTable=(userAreaPage*512)+RESOURCE_TABLE_OFFSET;

    //Checking for free entries in resource table
    while(index<8 && [resourceTable+(index*2)]!=-1) do
        index=index+1;
    endwhile;


    //If no free entry, then Return -3.
    if(index==8) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -3 as Return Value in the user stack. (Address Translation required)
        [returnValueAddr] =-3;

        goto IReturn;        

        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;

        // //Switch to user stack
        // SP=[processTableEntry + 13];


        // ireturn;
    
    endif;



    //Call the open() function from the File Manager module to get the Open File table entry.
    multipush(R1,R2,R3,R4,R5,R6,R7,R8);
    R1=3;   //Open Function
    R2=fileName;    //fileName
    call MOD_3;     //Calling File Manager module
    multipop(R1,R2,R3,R4,R5,R6,R7,R8);

   
    // After a blocking module call recalculate the address,as the address would have changed (Due to Swapping)
    returnValueAddr=([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
   
    //If Open fails, Return the error code.
    if(R0==-1 || R0==-2) then
        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set R0 as Return Value in the user stack. (Address Translation required)
        [returnValueAddr] =R0;

        goto IReturn;

        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;

        // //Switch to user stack
        // SP=[processTableEntry + 13];

        // ireturn;
    endif;


    //Set the Per-Process Resource Table entry 
    [resourceTable+(index*2)]=FILE;
    [resourceTable+(index*2)+1]=R0;     //Setting Open File Table Index


    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry + 9] = 0;

    

    //Return the index of the Per-Process Resource Table entry.
    [returnValueAddr] = index; 

    goto IReturn;

    // R1=RELEASE_LOCK;
    // R2=KERN_LOCK;
    // call ACCESS_CONTROL;

    // //Switch to user stack
    // SP=[processTableEntry + 13];

    // ireturn;

endif;



//Checking whether it is close system Call
if(sysCall==3) then


    //Getting the fileDesc (Argument 1)
    alias fileDesc R5;
   


    //Set the MODE FLAG field in the process table to the system call number which is 3 for Close system call
    [processTableEntry + 9] = 3;


    //If file descriptor is invalid, Return -1.  

    if(fileDesc<0 || fileDesc>7) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [returnValueAddr] =-1;

        goto IReturn;

        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;

        // //Switch to user stack
        // SP=[processTableEntry + 13];

        // ireturn;

    endif;


    alias userAreaPage R6;
    alias resourceTable R7;
    userAreaPage=[processTableEntry+11];
    resourceTable=(userAreaPage*512)+RESOURCE_TABLE_OFFSET;

    //If the Resource identifier field of the Per Process Resource Table entry is invalid or does not indicate a FILE, Return -1.
    if([resourceTable+(fileDesc*2)]!=FILE) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [returnValueAddr] =-1;

        goto IReturn;

        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;

        // //Switch to user stack
        // SP=[processTableEntry + 13];

        // ireturn;


    endif;


    //Get the index of the Open File Table entry from Per-Process Resource Table entry.
    alias openFileTableIndex R8;
    openFileTableIndex=[resourceTable+(fileDesc*2)+1];

    //Call the close() function in the File Manager module with the Open File Table index as arguement.
    multipush(R1,R2,R3,R4,R5,R6,R7,R8);
    R1=4;       //Function number for close
    R2=openFileTableIndex;      //Open File Table Index
    call MOD_3;     //Calling File Manager module
    multipop(R1,R2,R3,R4,R5,R6,R7,R8);

    //Invalidate the Per-Process Resource Table entry.
    [resourceTable+(fileDesc*2)]=-1;  //Resource identifier
    [resourceTable+(fileDesc*2)+1]=-1;  //Index 


    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+5*CORE + 1] * PT_ENTRY_SIZE) + 9] = 0;


   

    //Return 0
    [returnValueAddr] = 0; 

    goto IReturn;

    // R1=RELEASE_LOCK;
    // R2=KERN_LOCK;
    // call ACCESS_CONTROL;

    //  //Switch to user stack
    // SP=[processTableEntry + 13];

    // ireturn;


endif;



//Seek System Call
if(sysCall==6) then

    //Set the MODE FLAG field in the process table to the system call number which is 6 for Seek system call
    [processTableEntry + 9] = 6;

    //Getting the fileDesc (Argument 1)
    alias fileDesc R5;
    

    //Getting offset (Argument 2)
    alias offset R6;
    offset = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];


    //If file descriptor is invalid, Return -1.  

    if(fileDesc<0 || fileDesc>7) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [returnValueAddr] =-1;

        goto IReturn;

        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;

        // //Switch to user stack
        // SP=[processTableEntry + 13];

        // ireturn;

    endif;


    //Locate the Per-Process Resource Table of the current process.
    alias resourceTable R7;
    resourceTable=([processTableEntry+11]*512)+RESOURCE_TABLE_OFFSET;


    //If the Resource identifier field of the Per Process Resource Table entry is invalid or does not indicate a FILE, return -1.  
    if([resourceTable+(fileDesc*2)]!=FILE) then

        [returnValueAddr]=-1;

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry+ 9] = 0;

        

        //passing control back to user program
        goto IReturn;
        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;

        // // set back the value of SP to point to top of user stack
        // SP = [processTableEntry + 13];


        // ireturn;



    endif;

    //Get the index of the Open File Table entry from the Per Process Resource Table entry.
    alias fileTableIndex R8;
    fileTableIndex=[resourceTable+(fileDesc*2)+1];

    //Get the index of the Inode Table entry from the Open File Table entry. 
    alias inodeIndex R9;
    inodeIndex=[OPEN_FILE_TABLE+(fileTableIndex*4)];

    
    //Acquire the Lock on the File by calling the acquire_inode() function in the Resource Manager module.
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9);
    R1=4;   //Acquire Inode
    R3=[SYSTEM_STATUS_TABLE+5*CORE+1];    
    R2=inodeIndex;      //Inode index
    call MOD_0;     //Resource Manager Module
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9);

    //recalculate Return address
    returnValueAddr=([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);

    //If acquire inode fails Return -1
    if(R0==-1) then

        [returnValueAddr]=-1;

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry+ 9] = 0;

        

        //passing control back to user program
        goto IReturn;
        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;

        // // set back the value of SP to point to top of user stack
        // SP = [processTableEntry + 13];


        // ireturn;


    endif;


    //Get the Lseek position from the Open File Table entry
    alias lseek R10;
    lseek=[OPEN_FILE_TABLE+(fileTableIndex*4)+2];


    //Check the validity of the given offset 
    alias fileSize R11;
    if(inodeIndex==INODE_ROOT) then
       fileSize=480;        //Size of root file
    else
        fileSize=[INODE_TABLE+(inodeIndex*16)+2];
    endif;

    //If (lseek + the given offset) is less than 0, release_inode() and return -2.
    if((lseek+offset)<0) then

        multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
        R1=5;   //Release Inode
        R3=[SYSTEM_STATUS_TABLE+5*CORE+1];
        R2=inodeIndex;
        call MOD_0;     //Resource Manager
        multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

        [returnValueAddr]=-2;

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry+ 9] = 0;

        

        //passing control back to user program
        goto IReturn;

        // R1=RELEASE_LOCK;
        // R2=KERN_LOCK;
        // call ACCESS_CONTROL;

        // // set back the value of SP to point to top of user stack
        // SP = [processTableEntry + 13];


        // ireturn;

    endif;


    //Check this part
    if(offset==0) then
        //Set lseek value in the Open File Table entry to 0.
        [OPEN_FILE_TABLE+(fileTableIndex*4)+2]=0;
    else 
    
        if((lseek+offset)>fileSize) then
            //Set the lseek value to file size
            [OPEN_FILE_TABLE+(fileTableIndex*4)+2]=fileSize;
        else
            //Change the lseek value in the Open File Table to lseek+offset.
            [OPEN_FILE_TABLE+(fileTableIndex*4)+2]=lseek+offset;
        endif;

    endif;


    //Call the release_inode() function in the Resource Manager module.
    multipush(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);
    R1=5;   //Release Inode
    R3=[SYSTEM_STATUS_TABLE+5*CORE+1];
    R2=inodeIndex;
    call MOD_0;     //Resource Manager
    multipop(R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11);

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry+ 9] = 0;

    

    //Return 0
    [returnValueAddr]=0;

    //passing control back to user program

IReturn:

    R1=RELEASE_LOCK;
    R2=KERN_LOCK;
    call ACCESS_CONTROL;

    // set back the value of SP to point to top of user stack
    SP = [processTableEntry + 13];



    ireturn;



endif;





