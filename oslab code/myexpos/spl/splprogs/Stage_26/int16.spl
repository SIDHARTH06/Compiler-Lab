//INT 16-Newusr, Remusr, Setpwd, Getuname, Getuid

alias sysCall R1;
alias userSP R2;

//Storing userSP
userSP=SP;

//Extracting  System Call number from user stack
sysCall=[([PTBR + 2 * ((userSP - 5) / 512)] * 512) + ((userSP - 5) % 512)];


alias pid R3;
pid=[SYSTEM_STATUS_TABLE+1];

alias processTableEntry R4;
processTableEntry=PROCESS_TABLE + (pid * PT_ENTRY_SIZE);





alias returnAddr R5;
returnAddr=([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);



//Checking whether it is the newuser system Call
if(sysCall==22) then

    //Set the MODE FLAG field in the process table to the system call number which is 22 for NewUser system call
    [processTableEntry + 9] = 22;

    //If the current user is not root, or if the current process is not the shell, return -2.
    if([SYSTEM_STATUS_TABLE]!=ROOT || pid!=SHELL_PROCESS) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -2 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -2;

        

        ireturn;
    endif;


    //Loop through the User Table and exit returning -1 if an entry for the user already exists.
    alias userID R6;
    userID=0;
    alias username R7;
    alias password R8;

    //Getting the Username (Argument 1)
    username=[([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];

    //Getting the password (Argument 2)
    password = [([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];


    while(userID<MAX_USER_NUM) do

        if([USER_TABLE+(userID*2)]==username) then
            //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
            [processTableEntry + 9] = 0;

            //Set -1 as Return Value in the user stack. (Address Translation required)
            [returnAddr] = -1;

            

            ireturn;
        endif;
    
        userID=userID+1;
    endwhile;


    //Find a free entry in the User Table. If no free entry is found, return -3.
    userID=0;
    while(userID<MAX_USER_NUM && [USER_TABLE+(userID*2)]!=-1) do
        userID=userID+1;
    endwhile;

    if(userID==MAX_USER_NUM) then
        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -3 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -3;

       

        ireturn;

    endif;


    
    //Find the encrypted password by applying the ENCRYPT instruction on the input password.
    encrypt password;

    //Set the USERNAME and ENCRYPTED PASSWORD fields of the User Table entry.
    alias userTableEntry R9;
    userTableEntry=USER_TABLE+(userID*2);
    [userTableEntry]=username;
    [userTableEntry+1]=password;

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry + 9] = 0;

    //Set 0 as Return Value in the user stack. (Address Translation required)
    [returnAddr] = 0;

    

    ireturn;

   
endif;


//Checking whether it is the remusr system call
if(sysCall==23) then

    //Set the MODE FLAG field in the process table to the system call number which is 23 for RemUser system call
    [processTableEntry + 9] = 23;


    //If the current user is not root, or if the current process is not the shell, return -2.
    if([SYSTEM_STATUS_TABLE]!=ROOT || pid!=SHELL_PROCESS) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -2 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -2;

        

        ireturn;
    endif;

    alias username R6;
    //Getting the Username (Argument 1)
    username=[([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];


    //If the user to be removed is the "root" or "kernel" return -2.
    if(username=="root" || username=="kernel") then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -2 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -2;

        

        ireturn;


    endif;

    alias userID R7;
    userID=0;

    //Loop through the User Table and find the entry curresponding to the user.
    while(userID<MAX_USER_NUM && [USER_TABLE+(userID*2)]!=username) do
        userID=userID+1;
    endwhile;

    //If the entry is not found, return -1.
    if(userID==MAX_USER_NUM) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -1;

        

        ireturn;


    endif;

    //Loop through the Root File and exit returning -3 if there are files of the user present on disk.
    alias loop R8;
    loop=0;

    while(loop<MAX_FILE_NUM) do

        if([ROOT_FILE+(loop*8)+3]==username) then

            //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
            [processTableEntry + 9] = 0;

            //Set -3 as Return Value in the user stack. (Address Translation required)
            [returnAddr] = -3;

           

            ireturn;
        endif;
        loop=loop+1;
    endwhile;


    //Invalidate the entry by setting the USERNAME and ENCRYPTED PASSWORD fields to -1.
    alias userTableEntry R9;
    userTableEntry=USER_TABLE+(userID*2);
    [userTableEntry]=-1;
    [userTableEntry+1]=-1;



    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry + 9] = 0;

    //Set 0 as Return Value in the user stack. (Address Translation required)
    [returnAddr] = 0;

    

    ireturn;

endif;


//Setpwd System Call -> 24
if(sysCall==24) then

    //Set the MODE FLAG field in the process table to the system call number which is 24 for Setpwd system call
    [processTableEntry + 9] = 24;

    //If the current process is not the shell, return -1.
    if(pid!=SHELL_PROCESS) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -1;

        ireturn;
    
    endif;


    alias username R6;
    alias password R7;


    //Getting the Username (Argument 1)
    username=[([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];

    //Getting the password (Argument 2)
    password = [([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];





    //Loop through the User Table and find the entry corresponding to the user name.
    //If entry is not found, return -2.
    alias userID R8;
    userID=0;
    while(userID<MAX_USER_NUM && [USER_TABLE+(userID*2)]!=username) do
        userID=userID+1;
    endwhile;

    if(userID==MAX_USER_NUM) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -2 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -2;

        ireturn;

    endif;

    alias processUserID R9;
    processUserID=[processTableEntry+(pid*PT_ENTRY_SIZE)+3];

    //If userid of the process is not equal to the userid of the user and the current user is not root Return -1
    if(processUserID!=userID && [SYSTEM_STATUS_TABLE]!=ROOT) then
        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -1;

        ireturn;
    endif;


    //Find the encrypted password by applying the ENCRYPT instruction on the input password.
    encrypt password;

    //Set the ENCRYPTED PASSWORD field in the user table entry.
    [USER_TABLE+(userID*2)+1]=password;

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry + 9] = 0;

    //Set 0 as Return Value in the user stack. (Address Translation required)
    [returnAddr] = 0;

    ireturn;    

endif;

//Getuid System Call
if(sysCall==26) then

    //Set the MODE FLAG field in the process table to the system call number which is 26 for GetUid system call
    [processTableEntry + 9] = 26;

    alias username R6;

    //Getting the Username (Argument 1)
    username=[([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];

    alias userID R7;
    userID=0;

    //Loop through the User Table to find the userID
    while(userID<MAX_USER_NUM && [USER_TABLE+(userID*2)]!=username) do
        userID=userID+1;
    endwhile;

    //If userID not found Return -1
    if(userID==MAX_USER_NUM) then
        [returnAddr] = -1;
    else
        [returnAddr] = userID;
    endif;


    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry + 9] = 0;


    ireturn;

endif;


//GetUname System Call
if(sysCall==25) then

    //Set the MODE FLAG field in the process table to the system call number which is 25 for GetUname system call
    [processTableEntry + 9] = 25;

    alias userID R6;
    userID=[([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];

    if(userID<0 || userID>15) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -1;

        ireturn;
    endif;


    alias userTableEntry R7;
    userTableEntry=USER_TABLE+(userID*2);

    //Fetch the user name from the User Table.
    alias username R8;
    username=[userTableEntry];



    //If the user table entry curresponding to the userid is invalid, return -1.
    if(username==-1) then

        //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
        [processTableEntry + 9] = 0;

        //Set -1 as Return Value in the user stack. (Address Translation required)
        [returnAddr] = -1;

        ireturn;

    endif;



    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [processTableEntry + 9] = 0;

    //Set 0 as Return Value in the user stack. (Address Translation required)
    [returnAddr] = username;

    ireturn;

endif;