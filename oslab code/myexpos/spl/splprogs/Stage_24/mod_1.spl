//Process Manager Module

//Function number is present in R1 and PID passed as an argument is stored in R2
alias functionNum R1;



//Free User Area Page Function
if(functionNum==2) then
    alias PID R2;
    //Obtain the user area page number of process from the process table 
    alias userAreaPage R3;
    userAreaPage=[PROCESS_TABLE+(PT_ENTRY_SIZE*PID)+11];

    alias resourceTable R5; 
    //If the resource is valid and is semaphore,Then invoke Release Semaphore function of resource manager module.

    resourceTable=((userAreaPage+1)*512)-16;
    alias loop R4;
    loop=0;
    while(loop<8) do

        if([resourceTable+(2*loop)]==SEMAPHORE) then
            multipush(R1,R2,R3,R4,R5);
            R1=7;   //Release Semaphore function
            R3=PID;     //PID
            R2=[resourceTable+(2*loop)+1]; //Semaphore Table index
            call MOD_0; //Resource Manager Module
            multipop(R1,R2,R3,R4,R5);
        endif;


        
        if([resourceTable+(2*loop)]==FILE) then
            multipush(R1,R2,R3,R4,R5);
            R1=4;   //Close file function
            R2=[resourceTable+(2*loop)+1]; //File Table index
            call MOD_3; //File Manager Module
            multipop(R1,R2,R3,R4,R5);
        endif;





        loop=loop+1;
    endwhile;





    //Free the user area page by invoking the Release Page function in memory manager module(MOD_2).
    multipush(R1,R2,R3);
    R1=2;       //Function numberof release page
    R2=userAreaPage;   //Page to be released
    call MOD_2;            //Calling memory manager module
    multipop(R1,R2,R3);

    return;   //Return to caller
endif;



//Exit Process Function
if(functionNum==3) then
    alias PID R2;

    //Invoke the Free Page Table function  of Process Manager Module(This same module)
    multipush(R1,R2);
    R1=4;
    //R2 already contains the PID
    call MOD_1;          //Calling Process Manager Module(This same module)
    multipop(R1,R2);

    
    //Invoke the Free user Area Page function of Process Manager Module(This same module)
    multipush(R1,R2);
    R1=2;
    //R2 already contains the PID
    call MOD_1;          //Calling Process Manager Module(This same module)
    multipop(R1,R2);

    //Set the state of the process as TERMINATED
    [PROCESS_TABLE+(PT_ENTRY_SIZE*PID)+4]=TERMINATED;

    //Checking whether the exit process function is not invoked from  exec system Call
    if([PROCESS_TABLE+(PT_ENTRY_SIZE*PID)+9]!=9) then

        //Loop through all process table entries, if there is a process with STATE as tuple (WAIT_PROCESS, current process PID) then change the STATE field to READY.
        alias loop R3;
        loop=0;

        while(loop<MAX_PROC_NUM) do
            if([PROCESS_TABLE+(loop*PT_ENTRY_SIZE)+4]==WAIT_PROCESS && [PROCESS_TABLE+(loop*PT_ENTRY_SIZE)+5]==PID) then
            [PROCESS_TABLE+(loop*PT_ENTRY_SIZE)+4]=READY;
            endif;

            //Checking whether any process has pid as parent
            if([PROCESS_TABLE+(loop*PT_ENTRY_SIZE)+2]==PID) then
                [PROCESS_TABLE+(loop*PT_ENTRY_SIZE)+2]=-1;      //Process is made orphan
            endif;


            loop=loop+1;
        endwhile;





    endif;




    return; //Return to caller
endif;


//Free Page Table Function
if(functionNum==4) then
    alias PID R2;

    //Invalidate the page table entries for the library pages
    [PTBR+0] = -1;
    [PTBR+1] = "0000";
    [PTBR+2] = -1;
    [PTBR+3] = "0000";

    //For each valid entry in the page table, release the page by invoking the Release Page function and invalidate the entry.
    alias loop R3;
    loop=0;
   


    while(loop<(PTLR-2)) do
        //Checking whether the page table entry is valid (Is there a better way to Do this?)
        if([PTBR+5+(loop*2)]=="0100" ||[PTBR+5+(loop*2)]=="1100" ||[PTBR+5+(loop*2)]=="0110" ||[PTBR+5+(loop*2)]=="0101" ||[PTBR+5+(loop*2)]=="1110" ||[PTBR+5+(loop*2)]=="1101" ||[PTBR+5+(loop*2)]=="1111" ||[PTBR+5+(loop*2)]=="0111") then

            //Invoking Release Page
            multipush(R1,R2,R3);
            R1=2;   //Release Page Function Number
            R2=[PTBR+4+(loop*2)];  //Page number
            call MOD_2;     //Calling Memory Manager Module (MOD 2)
            multipop(R1,R2,R3);

            //Invalidate the entry
            [PTBR+4+(loop*2)]=-1;
            [PTBR+5+(loop*2)]="0000";
        endif;
        loop=loop+1;
    endwhile;


    //If there are valid entries for heap and stack in disk map table for the current process invoke release block for those entries
    //First Heap Page
    if([DISK_MAP_TABLE+(PID*10)+2]!=-1) then
        multipush(R1,R2,R3);
        R1=4;                                //Function number for Release Block in Memory Manager module (MOD_2)
        R3=PID;                              //Storing R3 before R2 because R2 stores PID
        R2=[DISK_MAP_TABLE+(R3*10)+2];     //Storing Block Number (R3 because as R3 has pid)
        call MOD_2;
        multipop(R1,R2,R3);
    endif;


    //Second Heap Page
    if([DISK_MAP_TABLE+(PID*10)+3]!=-1) then
        multipush(R1,R2,R3);
        R1=4;                                //Function number for Release Block in Memory Manager module (MOD_2)
        R3=PID;                              //Storing R3 before R2 because R2 stores PID
        R2=[DISK_MAP_TABLE+(R3*10)+3];     //Storing Block Number (R3 because as R3 has pid)
        call MOD_2;
        multipop(R1,R2,R3);
    endif;
    

    //First Stack Page
    if([DISK_MAP_TABLE+(PID*10)+8]!=-1) then
        multipush(R1,R2,R3);
        R1=4;                                //Function number for Release Block in Memory Manager module (MOD_2)
        R3=PID;                              //Storing R3 before R2 because R2 stores PID
        R2=[DISK_MAP_TABLE+(R3*10)+8];     //Storing Block Number (R3 because as R3 has pid)
        call MOD_2;
        multipop(R1,R2,R3);
    endif;


    //Second Stack Page
    if([DISK_MAP_TABLE+(PID*10)+9]!=-1) then
        multipush(R1,R2,R3);
        R1=4;                                //Function number for Release Block in Memory Manager module (MOD_2)
        R3=PID;                              //Storing R3 before R2 because R2 stores PID
        R2=[DISK_MAP_TABLE+(R3*10)+9];     //Storing Block Number (R3 because as R3 has pid)
        call MOD_2;
        multipop(R1,R2,R3);
    endif;


    loop=0;

    //Invalidate all the entries of the disk map table.
    while(loop<10) do
        [DISK_MAP_TABLE+(PID*10)+loop]=-1;
        loop=loop+1;
    endwhile;




    return;   //Return to Caller
endif;


//Get PCB entry
if(functionNum==1) then
    alias index R2;
    alias pid R0;

    pid=-1;
    index=0;

    //Loop through process table entries
    while(index<MAX_PROC_NUM) do

        //Check whether state is terminated
        if([PROCESS_TABLE+(index*PT_ENTRY_SIZE)+4]==TERMINATED) then
            
            //setting pid field to index
            [PROCESS_TABLE+(index*PT_ENTRY_SIZE)+1]=index;

            //set the state to allocated
            [PROCESS_TABLE+(index*PT_ENTRY_SIZE)+4]=ALLOCATED;

            //Set ptbr field
            [PROCESS_TABLE+(index*PT_ENTRY_SIZE)+14]=PAGE_TABLE_BASE+(20*index);

            //Set ptlr field
            [PROCESS_TABLE+(index*PT_ENTRY_SIZE)+15]=10;

            pid=index;
            return;
        endif;

        index=index+1;
    endwhile;


    return;   //(Returns -1)
endif;










    

