breakpoint;  // for assignment 2

//Save the current value of User SP into the corresponding Process Table entry
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;


// Setting SP to UArea Page number * 512 - 1 (Kernel Stack)
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;


//Save the user context to the kernel stack
backup;


//Obtain the PID of currently executing process from System Status Table .
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];


//The Process table entry of the current process can be computed as PROCESS_TABLE + currentPID*16. Save the KPTR, PTBR and PTLR values to the Process Table entry of the current process. Set the state of the process as READY.
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;     //Note that instead of saving the actual value of KPTR, we are saving KPTR%512. This is because the OS design stipulates that KPTR must contain the offset of the kernel stack pointer within the User Area Page. 
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;
[process_table_entry + 4] = READY;


alias newPID R2;                           //We have three processes to schedule , the new process will be the next process to execute
if(currentPID == 0) then
	newPID = 1;
endif;
if(currentPID == 1) then
	newPID = 2;
endif;
if(currentPID == 2) then
	newPID = 0;
endif;


alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;  //Using UserAreaPage Number and KPTR
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];


[SYSTEM_STATUS_TABLE + 1] = newPID;    //Set the PID field of the System Status Table as newPID


if([new_process_table + 4] == CREATED) then   //If the process is in created state it has no user context to Restore ,so there is no need to Restore.
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	breakpoint;  // for assignment 2
	ireturn;
endif;




[new_process_table + 4] = RUNNING;


//Restore the user context from the kernel stack
restore;

// set SP to the user SP saved in Process Table, before returning to user mode as it was in running state before so there is user context to be restored
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];   //Do not use new_process_table here as its values will get  lost after Restore



breakpoint;  // for assignment 2

//switch to user mode
ireturn;

