
//Load Load module 7 (Boot Module)from disk blocks 67 and 68 to memory pages 54 and 55 respectively.

loadi(54,67);
loadi(55,68);


//Load the idle code from disk to memory (mem,disk)
loadi(69,11);
loadi(70,12);








SP=(82*512)-1;  //Set up Stack for calling the boot module (kernel stack of IDLE Process)

call BOOT_MODULE;  //calling the boot module









//Process Table entry for IDLE process.

//As we are using the first Process Table entry, the PID will be 0. eXpOS kernel is expected to store the PID in the PID field of the process table.
//The process table entry for IDLE process starts at PROCESS_TABLE
[PROCESS_TABLE + 1] = 0;        //setting PID
[PROCESS_TABLE + 4] = RUNNING;  // setting state
[PROCESS_TABLE + 11]= 82;       //User Area Page number for the IDLE Process
[PROCESS_TABLE + 13]= 8*512;     //UPTR Field (Logical Address to the top of the USER Stack) for IDLE
[PROCESS_TABLE + 12]= 0;        //Setting KPTR Field , it is assumed to be empty
[PROCESS_TABLE + 14]= PAGE_TABLE_BASE;     //Setting PTBR  Field of IDLE Process
[PROCESS_TABLE + 15]= 10;       //Setting PTLR Field of IDLE Process







//The second field of System Status table must be set to the PID of the process which is going to be run in user mode (which is the IDLE Process with PID 0)
[SYSTEM_STATUS_TABLE + 1] = 0;






//Setting up Page tables

PTBR = PAGE_TABLE_BASE; //Pointing to the page table of the IDLE Process


// For the IDLE Process


//Library
[PTBR+0] = -1;
[PTBR+1] = "0000";
[PTBR+2] = -1;
[PTBR+3] = "0000";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";



//Since the total address space of a process is 10 pages, PTLR register must be set to value 10.
PTLR = 10;


SP=8*512;  // Setting the logical address for the Stack (Pages 8 & 9 are for the stack)

[81*512] = [69 * 512 + 1];  // Storing the entry point of the code to the top of the stack of the IDLE Process




ireturn;

