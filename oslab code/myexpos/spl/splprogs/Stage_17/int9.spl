//Exec System Call - INT 9  (System Call Number 9)

//Save the value of register SP as userSP
alias userSP R0;
userSP=SP;

//Save the value of SP in the user SP field of Process Table entry of the process.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13]=userSP;

//Set the value of SP to beginning of the kernel stack.
SP=([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512)-1;

//Set the MODE FLAG field in the process table to the system call number which is 9 for exec system call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

//Get the file name (Argument 1) from the user stack.
//Convert Logical Address to Physical Address
alias physicalPageNum R1;
alias offset R2;
alias fileNamePhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileNamePhysicalAddr = (physicalPageNum * 512) + offset;
alias fileName R4;
fileName=[fileNamePhysicalAddr];

//Search the memory copy of the inode table for the file
alias inodeIndex R5;
inodeIndex=0;

while(inodeIndex<MAX_FILE_NUM && [INODE_TABLE+(16*inodeIndex)+1]!=fileName)do
    inodeIndex=inodeIndex+1;
endwhile;



//If the file is not present or file is not in XEXE format Return to user mode with Return value -1 indicating failure (after setting up MODE FLAG and the user stack).
if(inodeIndex>MAX_FILE_NUM || [INODE_TABLE+(16*inodeIndex)]!=EXEC) then

    //Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

    alias physicalAddrRetVal R6;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;

    SP=userSP;
    ireturn;
endif;



// Call exit process function from the Process Manager module
multipush(R0,R1,R2,R3,R4,R5,R6);  //Saving register Context
R1=3;  //Function number of exit process
R2=[SYSTEM_STATUS_TABLE + 1];           //PID of the current process
call MOD_1;                             //Calling Process Manager Module

//Ignore contents of R0 as nothing is returned
multipop(R0,R1,R2,R3,R4,R5,R6); //restoring Context

alias userAreaPage R7;

//Get User Area Page
userAreaPage=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]; 

//Reclaim the same page by incrementing the memory free list entry of user area page
[MEMORY_FREE_LIST+userAreaPage]=[MEMORY_FREE_LIST+userAreaPage]+1;  

//Decrement the MEM_FREE_COUNT field in the system status table
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

//Set the value of SP to beginning of the kernel stack.
SP=(userAreaPage*512)-1;

//Update the STATE field to RUNNING 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4]=RUNNING;
//Store inode index in inode index field
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 7]=inodeIndex;

//Page Table For New Process (Same Page Table will be used by the process , so no change in PTBR)

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";






//Calling Memory Manager Module
multipush(R0,R1,R2,R3,R4,R5,R6,R7);  //Saving register Context
R1=1;    //Function number of Get Free Page in Memory Manager Module
call MOD_2;



//Allocating first Heap Page (Return Value is in R0)
[PTBR+4]=R0;
[PTBR+5] = "0110";

R1=1;    //Function number of Get Free Page in Memory Manager Module
call MOD_2;

//Allocating second Heap Page
[PTBR+6]=R0;
[PTBR+7] = "0110";

R1=1;    //Function number of Get Free Page in Memory Manager Module
call MOD_2;

//Allocating first Stack Page
[PTBR+16] = R0;
[PTBR+17] = "0110";


R1=1;    //Function number of Get Free Page in Memory Manager Module
call MOD_2;

//Allocating second Stack Page
[PTBR+18] = R0;
[PTBR+19] = "0110";


multipop(R0,R1,R2,R3,R4,R5,R6,R7); //Restoring Context

//Finding number of Pages for code
alias code_num R8;
code_num=0;

alias loop R9;
loop=0;



while(loop<4 && [INODE_TABLE+(16*inodeIndex)+8+loop]!=-1) do
    code_num=code_num+1;
    loop=loop+1;
endwhile;



//Allocating Pages for Code

loop=0;

while(loop<code_num) do
    multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);  //Saving register Context
    R1=1;
    call MOD_2;
    R10=R0;            //For Not Losing Value (Is there a better way?)
    multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);   //Restoring Context
    [PTBR+8+(loop*2)]=R10;
    [PTBR+9+(loop*2)]="0100";
    loop=loop+1;
endwhile;

//Empty Pages in code section
while(loop<4) do
    [PTBR+8+(loop*2)]=-1;
    [PTBR+9+(loop*2)]="0000";
    loop=loop+1;
endwhile;


//Load Code Blocks from disk to memory
loop=0;
//Loadi(mem,disk)

while(loop<code_num) do
    loadi([PTBR+8+(loop*2)],[INODE_TABLE+(16*inodeIndex)+8+loop]);
    loop=loop+1;
endwhile;


//Store the entry point IP value on top of the user stack.
[[PTBR+16]*512]=[[PTBR+8]*512+1];

//Change SP to user stack
SP=8*512;

//Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;


//Return to user mode
ireturn;





























