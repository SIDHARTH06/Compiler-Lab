//MOD 5 -Scheduler
//Obtain the PID of currently executing process from System Status Table .
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

//Push the BP of the current process on top of the kernel stack as it is not taken care by eXpl
multipush(BP);

//Obtain the Process Table entry corresponding to the current PID
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

//Saving KPTR,PTBR and PTLR into the process table
[process_table_entry + 12] = SP % 512;     //Note that instead of saving the actual value of KPTR, we are saving KPTR%512. This is because the OS design stipulates that KPTR must contain the offset of the kernel stack pointer within the User Area Page. 
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


alias newPID R2;  //New Process ID

newPID=currentPID+1;  

//Iterate through the Process Table entries, starting from the succeeding entry of the current process to find a process in READY or CREATED state.

while(newPID<=15 && [PROCESS_TABLE + newPID * 16+4] != READY && [PROCESS_TABLE + newPID * 16+4] != CREATED) do
newPID=newPID+1;
endwhile;


//If no such process can be found, select the idle process as the new process to be scheduled. Save PID of new process to be scheduled as newPID.
if(newPID==16)then
newPID=0;
endif;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;


//Obtain User Area Page number and kernel stack pointer value from Process Table entry of the new process and set SP as (User Area Page number) * 512 + (Kernel Stack pointer value).
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;  //Using UserAreaPage Number and KPTR


//Restore PTBR and PTLR from the corresponding fields in the Process Table entry of the new process.
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];


[SYSTEM_STATUS_TABLE + 1] = newPID;    //Set the PID field of the System Status Table as newPID


if([new_process_table + 4] == CREATED) then   //If the process is in created state it has no user context to Restore ,so there is no need to Restore.
	[new_process_table + 4] = RUNNING;        //Setting State
	SP = [new_process_table + 13];            //Set SP to the value in the UPTR field of the process table entry.
	[new_process_table + 9]=0;                //Set Mode flag field to 0
	ireturn;                                  //Switch to user mode
endif;


[new_process_table + 4] = RUNNING;            //Set the state of the new process as RUNNING.

multipop(BP);     //Pop back BP

return;
