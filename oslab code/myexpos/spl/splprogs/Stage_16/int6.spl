//Read System Call

//Set the MODE FLAG field in the process table to the system call number which is 7 for read system call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;


//Save the value of register SP as userSP
alias userSP R0;
userSP=SP;

//Save the value of SP in the user SP field of Process Table entry of the process.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13]=userSP;

//Set the value of SP to beginning of the kernel stack.
SP=([PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512)-1;


//Get the file Descriptor  value from the stack.
//Convert Logical Address to Physical Address
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

if(fileDescriptor!=-1)
then
    //code when argument 1 (file descriptor) is not valid 
    // Return -1

    alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;
else
	//code when argument 1 (file descriptor) is valid

    //Calculate physical address of the argument 2 and extract the value from it , which is the word address.
    alias word R5;
    word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
   

    multipush(R0,R1,R2,R3,R4,R5);           //Saving Register Context
    R1=4;                                   //Store the function number of Terminal Read
    R2=[SYSTEM_STATUS_TABLE + 1];           //PID of the current process
    R3=word;                                //address of word
    call MOD_4;                             //Calling Device Manager Module

    //Ignore contents of R0 as terminal write does not Return anything

    multipop(R0,R1,R2,R3,R4,R5);            //Restore the Context


    //Set the Return value as 0 indicating success
    alias physicalAddrRetVal R6;
    physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = 0;
endif;

//Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

// set back the value of SP to point to top of user stack
SP = userSP;

//passing control back to user program
ireturn;

