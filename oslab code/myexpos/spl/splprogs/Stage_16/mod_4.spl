//Device Manager module

//Function number and current PID are stored in registers R1 and R2.
alias functionNum R1;
alias currentPID R2;


if(functionNum==3)then   //Checking whether it is terminal write function

alias word R3; //Word is stored in R3

//Calling Acquire Terminal
multipush(R1,R2,R3);       //Saving Register Context before module Call
R1=8;                   //Function number 8 for Acquire Terminal
//R2 already contains the PID, so need to assign it as of now.
call MOD_0;             //Calling Resource Manager Module
//Ignore the value present in R0 as Acquire Terminal does not have any return value.
multipop(R1,R2,R3);        //Restoring Register Context


print word;


//Calling Release Terminal
multipush(R1,R2,R3);       //Saving Register Context before module Call
R1=9;                       //Function number 9 for Release terminal
//R2 already contains the PID, so need to assign it as of now.
call MOD_0;                //Calling Resource Manager Module
//Return value will be stored in R0 by module 0. Save this return value in any other register if needed.(I have not stored)
multipop(R1,R2,R3);        //Restoring Register Context

return;

endif;


if(functionNum==4)then  //Checking whether it is terminal read function

alias logicalAddr R3;    //Logical address of word

multipush(R1,R2,R3); //Saving register Context
R1=8; //Function number for acquire terminal
//R2 already contains the PID, so need to assign it as of now.
call MOD_0;             //Calling Resource Manager Module
multipop(R1,R2,R3);

read;                          //Use read statement, for requesting to read from the terminal
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_TERMINAL;    //Change the state of the current process to WAIT_TERMINAL.

//Invoking scheduler

multipush(R1,R2,R3);
call MOD_5;

multipop(R1,R2,R3); //Restoring Context

alias physicalAddr R4;

physicalAddr=([PTBR+2*(logicalAddr/512)]*512)+(logicalAddr%512);

[physicalAddr]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+8];        //Store the value present in input buffer field of process table to physical address location

return;

endif;